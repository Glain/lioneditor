<html>
<Meta http-equiv="progma" content="no-cache">
<title>Agemo's Debugger Readme</title>
<style>
TD,BODY {
	FONT-SIZE: 10pt; 
	COLOR: #000000;
}
</style>

<body bgcolor=#FFFFFF topmargin=0　leftmargin=100 link="#000000" vlink="#000000" ALINK="#000000">
<table border="0" cellspacing="1" cellpadding="3" width=90% bgcolor="#EEEEEE">
<tr>
	<td>
		
<Center>
<pre>
Agemo Debuger
last updated at 2006-07-20
===========================
</pre>
<br></center>　　　　　　　
<br>
<br><P>
<pre>
===========
0. Credits
===========
  This debugger is a mod of PCSX, open source, thanks PCSX Team.
  debugger author: Agemo / agemo@163.com
</pre>

<p>
<pre>
===============
1. Installation
===============
. pcsx's plugins and bios is same to epsxe. my recommanded plugins:
　Graphic: pete soft, windows 400x300
　Sound: no sound 
　Keyboard: Segu Direct Input Keyboard. inactive window can input keys, very useful.

. PCSX menu
  configuration-> CPU -> Enable Interpreter Cpu
　if you don't check this option, all debug functions(such as break point) don't work.
　
  the debugger is slower than normal PCSX. but is enough for debugging.
</pre>

<p>
<pre>
===============
2. Function List
===============

. <font color=blue>pause/resume CPU</font>
  as it is.

. <font color=blue>Dump</font>
  dump files to directory ".\Dump\"
  
  ram.bin   Main Memory(2MB)
  vram.bin  Video Memory(1MB)
  bios.bin  BIOS(512KB)

  * before dump, you must pause cpu first.

. <font color=blue>Load</font>
　load file ram.bin to PSX Main Memory.
  
  * this debugger doesn't provide a build-in memory editor,
    but you can dump to file, then use your favorate hex editor (I use winhex)
    finally load file back to memory.
　
. <font color=blue>ASM Log</font>
　log executed instructions to file ".\asm.txt"
　
　* normally, this log function is cooperate with other function.

　Clear button is clear this log file. and when debugger start, this log is cleared also.
　
. <font color=blue>Break on pc =</font>
　instruction break point. specify address in right textbox,
　when cpu execute to this address, break point comes.

　address is in HEX format.
　when you changed break point, you will see information such as:
  "wait for pause on pc 80003C5D"
　
　* to modify a break point, uncheck then re-check it.

. <font color=blue>Break on Mem Write</font>
　when data in specified mem range is modified, break point occurs.
　right two text box is range of low-bounder and high-bounder.
　it can be used to monitor any address, such as DMA registers address

. <font color=blue>Break on Mem Read</font>
　when data in specified mem range is read, break point occurs.

. <font color=blue>Break on Mem address = value</font>
　when data in specified mem address is set to "specified value", break point occurs.
　"specified value" is a single byte.

. <font color=blue>Exec To / Exec</font>

　in this row, textbox(readonly) in most left is "total exec instrunctions counter".
  I call it "total inst." for short.
  load instant save(F3) will set it to 0. 

　the following textbox is input you value ( decimal digits ).
　press button "Exec To",  break point when  "total inst." is equal to "textbox value".

　press button "Exec",  break point after exec "textbox value" instruction.
  then if you set value to 1 then press Exec, it's step.

. <font color=blue>] VRAM Viewer</font>
　VRAM Viewer is a standlone tools, in ".\dump\vram.exe"
  it can see vram.bin, and support all psx video format, and CLUT.

. <font color=blue>GPU Upload break</font>
　when Memory data upload to VRAM, break point occurs.
  you can get memory address from, and upload to where in VRAM.
　it's very useful, can trace all textures in vram come from.

. <font color=blue>GPU Chain break</font>
　log GPU draw prims to gpu.log
　gpu.log format:
　　　　　　0CED74:48 - F3 (87, 130)-(87, 146)-(163, 146) RGB( 0, 40,　0)
　0CED74: prim address in main memory
　48　　: prim type
　following is explain. F3 is triangle, and sprite is used to draw textures
　
　everything in screed is draw in "prims", for more information about prims,
  please check <a href=gpu.txt>gpu.txt</a>.

. <font color=blue>CDROM Read monitor</font>
　as it is. The output information is

　cdrom $80045800 <- 64:53:06($473f7), 2048 bytes

　$800B88E0   load address from cdrom (hex)
　64:53:06    cdrom positon in format min:second:sector (see iso9660 standards)
　$473f7      cdrom LBA, absolute sector number(hex). iso_offset = LBA * 0x930
　2048 bytes  read bytes, normal is one sector which is 2048 bytes.
　
　* if you use winhex to view iso file (raw 2352 format)
    from sector offset 0x18 begin, following 2048 bytes is data area. 
    for more information, check iso9600 documents.
　
. <font color=blue>SPU Upload Bread</font>
　if something upload to SPU memory, break point
　
. <font color=blue>align check</font>
　memory alignment check (for example, LH is align with 2,  LW is align with 4)
　if your hack code access unaligned address, emulator works, but real ps is dead.

=============
3. Example
=============

.　<font color=blue>modified PS Main memory</font>
　 pause cpu->dump
　 
　 use winhex to edit "dump\ram.bin"
　 this file offset 0 is equal to memory 0x80000000

　 when you done, load -> resume cpu

.　<font color=blue>trace back</font>

  for example, when some break point occured, you want to know what have been executed before, 
  the you need this function.

  use emulator's Save(F1),load(F3)
       +
      debugger's "total inst."
  you can do it.

  
  1. emulator F1 then F3 (set "total inst." to 0)
  2. break on mem write
  3. resume
  3. when break point occured, remember current "total inst." value.
  4. emulator F3 (set "total inst." to 0 again)
  5. use "exec" to execute to before.
  then you can enable "asm log" to get all instruction 

. <font color=blue>Segu's Keboard plugin</font> 
  inactive window can input keys
  for example you know when you press 'Circle' button, game will read some memory area
  1. emulator F1 then F3 (set "total inst." to 0)
  2. break on mem read
  3. press Circle button (don't release)
  4. resume cpu, the break point occures
  
  
. <font color=blue>tricks to view asm log</font>
  
  I use UltraEdit to view asm log.
  for example you see a line asm which read memory "0003c724"
  80014934 : LW      00040000 (a0), c724 (00040000 (v0)) [0003c724]
  then want to know memeory 0003c724 is writed in where
  
  UltraEdit double click "80067c01" to choose it, then Ctrl-F3 find forward
  you will see this address
  (if you can't find, maybe your asm log is not included that, try break on mem write to trace)


=================
4. Known Problems
=================

. memory break point doen't break in DMA read(write)
  if you find some memory area is modified, but break mem write can't break it
  so it maybe in DMA. if data is read from cdrom, use cdrom break point.
 
. in debugger's disasm window, when you step trace, maybe some error in jump code
  solution is use asm log. asm log result is all correct.

</pre>
  



	</td> 
</tr>
</table>
